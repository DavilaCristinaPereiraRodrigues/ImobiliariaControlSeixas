package model.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import model.ContratoAluguel;
import util.Conexao;
import util.Configurador;

public class ContratoAluguelDAO {
	Configurador config = new Configurador();
	String url;
	String driver;
	String login;
	String senha;

	public ContratoAluguelDAO() {

		url = config.getUrl();
		driver = config.getDriver();
		login = config.getLogin();
		senha = config.getSenha();

	}// fim do public bairroDAO

	public static ContratoAluguel incluirAluguel(int id_contAluguel, String dt_aquisicao,
			String dt_vencimento, String dt_pag, double valor,
			double comissao_cor) {
		
		ContratoAluguel contAluguel = null;
		ContratoAluguelDAO contAluguelDAO = new ContratoAluguelDAO();

		try {
			// Criação do insert
			String sql = "insert into contrato_aluguel(id_contAluguel, dt_aquisicao, "
					+ "dt_vencimento, dt_pag, valor, comissao_cor, fk_cliente, "
					+ "fk_imovel, fk_corretor, fk_prop)values"
					+ "(?,?,?,?,?,?,?,?,?,?);"; //não é auto_increment pois usará o num do contrato
			
			
			// Obter a conexão com o BD
			Conexao conex = new Conexao(contAluguelDAO.url,contAluguelDAO.driver,
					contAluguelDAO.login,contAluguelDAO.senha);

			// Abrir a conexao
			Connection con = conex.obterConexao();

			// Preparar o comando para ser executado
			PreparedStatement comando = con.prepareStatement(sql);
		
			comando.setInt(1, id_contAluguel);
			comando.setString(2, dt_aquisicao);
			comando.setString(3, dt_vencimento);
			comando.setString(4, dt_pag);
			comando.setDouble(5, valor);
			comando.setDouble(6, comissao_cor);

			// Comando executado
			comando.executeUpdate();

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		contAluguel = new ContratoAluguel(id_contAluguel, dt_aquisicao, dt_vencimento, dt_pag, valor ,comissao_cor);
		
		return contAluguel;
		
	}// fim do incluirAluguel()
	
	// Excluir pelo Código do Contrato
	public static ContratoAluguel excluirAluguel(int id_contAluguel) {
		 ContratoAluguel contAluguel = null;
		 ContratoAluguelDAO contAluguelDAO = new ContratoAluguelDAO();

		try {
			// Criação do delete
			String sql = "delete from contratoAluguel where idcontAluguel = ?";

			// Obter a conexão com o BD
			Conexao conex = new Conexao(contAluguelDAO.url,contAluguelDAO.driver,
					contAluguelDAO.login,contAluguelDAO.senha);

			// Abrir a conexao
			Connection con = conex.obterConexao();

			// Preparar o comando para ser executado
			PreparedStatement comando = con.prepareStatement(sql);

			comando.setInt(1,id_contAluguel );

			// Comando executado
			comando.executeUpdate();

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		return contAluguel;
	}// fim do excluirAluguel();
	
	public static ContratoAluguel alterarContratoAluguel( 
			int id_contAluguel, String dt_aquisicao,
			String dt_vencimento, String dt_pag, double valor,
			double comissao_cor) { //aqui coloquei p/ alterar pelo id pois ñ tinha oltra indentificação única
		
		 ContratoAluguel contAluguel = null;
		 ContratoAluguelDAO contAluguelDAO = new ContratoAluguelDAO();
		try {
			// Criação do update
			String sql = "update contratoAluguel set  dt_aquisicao = ?, dt_vencimento = ?,  "
					+ "dt_pag = ?,  valor = ?, comissao_cor = ? where id_contAluguel = ?";

			// Obter a conexão com o BD
			Conexao conex = new Conexao(contAluguelDAO.url,contAluguelDAO.driver,
					contAluguelDAO.login,contAluguelDAO.senha);

			// Abrir a conexao
			Connection con = conex.obterConexao();

			// Preparar o comando para ser executado
			PreparedStatement comando = con.prepareStatement(sql);
			

			comando.setString(1, dt_aquisicao);
			comando.setString(2, dt_vencimento);
			comando.setString(3, dt_pag);
			comando.setDouble(4, valor);
			comando.setDouble(5, comissao_cor);
			comando.setInt(6, id_contAluguel);
			
			// Comando executado
			
			comando.executeUpdate();

		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

		return contAluguel;
	}// fim do alterarContratoAluguel();
	


}